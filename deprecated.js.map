{"version":3,"sources":["deprecated.es6"],"names":["promiseOsapiPollingRequest","osapiRequestFunc","filterFunction","targetNumber","maxIterationCount","console","warn","Promise","resolve","reject","list","iteration","getNextChunk","executable","then","response","getNextPage","length","reason","filter"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AAEO,SAASA,0BAAT,CAAoCC,gBAApC,EAAsDC,cAAtD,EAAsEC,YAAtE,EAA2G;AAAA,MAAvBC,iBAAuB,uEAAH,CAAG;AAC9GC,EAAAA,OAAO,CAACC,IAAR,CAAa,oGAAb;AAEA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,SAAS,GAAG,CAAhB;;AAEA,aAASC,YAAT,CAAsBC,UAAtB,EAAkC;AAE9BF,MAAAA,SAAS;AAET,6CAAoBE,UAApB,EAAgCC,IAAhC,CAAqC,UAAAC,QAAQ,EAAI;AAE7C,YAAMC,WAAW,GAAGD,QAAQ,CAACC,WAAT,IAAwB,KAA5C;;AAEA,YAAI,CAACD,QAAQ,CAACL,IAAT,CAAcO,MAAnB,EAA2B;AAEvBT,UAAAA,OAAO,CAAC;AAACE,YAAAA,IAAI,EAAJA,IAAD;AAAOQ,YAAAA,MAAM,EAAE;AAAf,WAAD,CAAP;AAEH,SAJD,MAIO;AAEHR,UAAAA,IAAI,iDAAOA,IAAP,uCAAgBK,QAAQ,CAACL,IAAT,CAAcS,MAAd,CAAqBjB,cAArB,CAAhB,EAAJ;;AAEA,cAAIQ,IAAI,CAACO,MAAL,IAAed,YAAnB,EAAiC;AAE7BK,YAAAA,OAAO,CAAC;AAACE,cAAAA,IAAI,EAAJA,IAAD;AAAOM,cAAAA,WAAW,EAAXA,WAAP;AAAoBE,cAAAA,MAAM,gDAAyCP,SAAzC;AAA1B,aAAD,CAAP;AAEH,WAJD,MAIO;AAEH,gBAAIP,iBAAiB,KAAK,CAAtB,IAA2BO,SAAS,IAAIP,iBAA5C,EAA+D;AAE3D,kBAAIY,WAAJ,EAAiB;AAEb;AACAJ,gBAAAA,YAAY,CAACI,WAAD,CAAZ;AAEH,eALD,MAKO;AACHR,gBAAAA,OAAO,CAAC;AAACE,kBAAAA,IAAI,EAAJA,IAAD;AAAOQ,kBAAAA,MAAM,EAAE;AAAf,iBAAD,CAAP;AACH;AAEJ,aAXD,MAWO;AACHV,cAAAA,OAAO,CAAC;AAACE,gBAAAA,IAAI,EAAJA,IAAD;AAAOM,gBAAAA,WAAW,EAAXA,WAAP;AAAoBE,gBAAAA,MAAM,EAAE;AAA5B,eAAD,CAAP;AACH;AACJ;AACJ;AAEJ,OAnCD,WAmCST,MAnCT;AAoCH;;AAEDG,IAAAA,YAAY,CAACX,gBAAD,CAAZ;AACH,GAhDM,CAAP;AAiDH","sourcesContent":["import {promiseOsapiRequest} from \"./fetchPromise\";\n\nexport function promiseOsapiPollingRequest(osapiRequestFunc, filterFunction, targetNumber, maxIterationCount = 0) {\n    console.warn('Use of promiseOsapiPollingRequest is deprecated. Please use ContinuousLoadJiveOSAPI class instead.')\n\n    return new Promise((resolve, reject) => {\n\n        let list = []\n        let iteration = 0\n\n        function getNextChunk(executable) {\n\n            iteration++\n\n            promiseOsapiRequest(executable).then(response => {\n\n                const getNextPage = response.getNextPage || false\n\n                if (!response.list.length) {\n\n                    resolve({list, reason: 'no results'})\n\n                } else {\n\n                    list = [...list, ...response.list.filter(filterFunction)]\n\n                    if (list.length >= targetNumber) {\n\n                        resolve({list, getNextPage, reason: `target number reached (on iteration ${iteration})`})\n\n                    } else {\n\n                        if (maxIterationCount === 0 || iteration <= maxIterationCount) {\n\n                            if (getNextPage) {\n\n                                // recursion here\n                                getNextChunk(getNextPage)\n\n                            } else {\n                                resolve({list, reason: 'list end reached'})\n                            }\n\n                        } else {\n                            resolve({list, getNextPage, reason: 'maximum iteration count reached'})\n                        }\n                    }\n                }\n\n            }).catch(reject)\n        }\n\n        getNextChunk(osapiRequestFunc)\n    })\n}\n"],"file":"deprecated.js"}