{"version":3,"sources":["src/deprecated.es6"],"names":["promiseOsapiPollingRequest","osapiRequestFunc","filterFunction","targetNumber","maxIterationCount","console","warn","resolve","reject","list","iteration","getNextChunk","executable","then","getNextPage","response","length","reason","filter","catch"],"mappings":";;;;;;;;;;;;;;QAEgBA,0B,GAAAA,0B;;AAFhB;;;;AAEO,SAASA,0BAAT,CAAoCC,gBAApC,EAAsDC,cAAtD,EAAsEC,YAAtE,EAA2G;AAAA,QAAvBC,iBAAuB,uEAAH,CAAG;;AAC9GC,YAAQC,IAAR,CAAa,oGAAb;;AAEA,WAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,YAAIC,OAAO,EAAX;AACA,YAAIC,YAAY,CAAhB;;AAEA,iBAASC,YAAT,CAAsBC,UAAtB,EAAkC;;AAE9BF;;AAEA,mDAAoBE,UAApB,EAAgCC,IAAhC,CAAqC,oBAAY;;AAE7C,oBAAMC,cAAcC,SAASD,WAAT,IAAwB,KAA5C;;AAEA,oBAAI,CAACC,SAASN,IAAT,CAAcO,MAAnB,EAA2B;;AAEvBT,4BAAQ,EAACE,UAAD,EAAOQ,QAAQ,YAAf,EAAR;AAEH,iBAJD,MAIO;;AAEHR,sEAAWA,IAAX,oCAAoBM,SAASN,IAAT,CAAcS,MAAd,CAAqBhB,cAArB,CAApB;;AAEA,wBAAIO,KAAKO,MAAL,IAAeb,YAAnB,EAAiC;;AAE7BI,gCAAQ,EAACE,UAAD,EAAOK,wBAAP,EAAoBG,iDAA+CP,SAA/C,MAApB,EAAR;AAEH,qBAJD,MAIO;;AAEH,4BAAIN,sBAAsB,CAAtB,IAA2BM,aAAaN,iBAA5C,EAA+D;;AAE3D,gCAAIU,WAAJ,EAAiB;;AAEb;AACAH,6CAAaG,WAAb;AAEH,6BALD,MAKO;AACHP,wCAAQ,EAACE,UAAD,EAAOQ,QAAQ,kBAAf,EAAR;AACH;AAEJ,yBAXD,MAWO;AACHV,oCAAQ,EAACE,UAAD,EAAOK,wBAAP,EAAoBG,QAAQ,iCAA5B,EAAR;AACH;AACJ;AACJ;AAEJ,aAnCD,EAmCGE,KAnCH,CAmCSX,MAnCT;AAoCH;;AAEDG,qBAAaV,gBAAb;AACH,KAhDM,CAAP;AAiDH","file":"deprecated.js","sourcesContent":["import {promiseOsapiRequest} from \"./fetchPromise\";\n\nexport function promiseOsapiPollingRequest(osapiRequestFunc, filterFunction, targetNumber, maxIterationCount = 0) {\n    console.warn('Use of promiseOsapiPollingRequest is deprecated. Please use ContinuousLoadJiveOSAPI class instead.')\n\n    return new Promise((resolve, reject) => {\n\n        let list = []\n        let iteration = 0\n\n        function getNextChunk(executable) {\n\n            iteration++\n\n            promiseOsapiRequest(executable).then(response => {\n\n                const getNextPage = response.getNextPage || false\n\n                if (!response.list.length) {\n\n                    resolve({list, reason: 'no results'})\n\n                } else {\n\n                    list = [...list, ...response.list.filter(filterFunction)]\n\n                    if (list.length >= targetNumber) {\n\n                        resolve({list, getNextPage, reason: `target number reached (on iteration ${iteration})`})\n\n                    } else {\n\n                        if (maxIterationCount === 0 || iteration <= maxIterationCount) {\n\n                            if (getNextPage) {\n\n                                // recursion here\n                                getNextChunk(getNextPage)\n\n                            } else {\n                                resolve({list, reason: 'list end reached'})\n                            }\n\n                        } else {\n                            resolve({list, getNextPage, reason: 'maximum iteration count reached'})\n                        }\n                    }\n                }\n\n            }).catch(reject)\n        }\n\n        getNextChunk(osapiRequestFunc)\n    })\n}\n"]}