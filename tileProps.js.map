{"version":3,"sources":["src/tileProps.jsx"],"names":["getUrlParemeters","window","gala","parent","tile","getJiveURL","url","getAppURL","gadgets","require","util","getUrlParameters","cache","tileUrl","tilePath","_tileUrl","pathChunks","pathname","split","pop","join","tileId","_tileId","query","syn_app","tileProps"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,IAAIA,yBAAJ;;AAEA,IAAI,OAAOC,OAAOC,IAAd,IAAsB,WAA1B,EAAuC;AACnCF,uBAAmB,4BAAU;AACzB,eAAO;AACHG,oBAAQ,eAAKC,IAAL,CAAUC,UAAV,MAA0B,EAD/B;AAEHC,iBAAK,eAAKF,IAAL,CAAUG,SAAV,MAAyB;AAF3B,SAAP;AAIH,KALD;AAMH,CAPD,MAOO;AACH,QAAMC,UAAUC,QAAQ,cAAR,CAAhB;AACAT,uBAAmBQ,QAAQE,IAAR,CAAaC,gBAAhC;AACH;;AAED,IAAMC,QAAQ,EAAd;;AAEA;AACA,IAAMC,UAAU,SAAVA,OAAU,GAAU;AACtB,QAAI,CAACD,MAAMC,OAAX,EAAoB;AAChBD,cAAMC,OAAN,GAAgB,gBAAMb,mBAAmBM,GAAzB,EAA8B,IAA9B,CAAhB;AACH;;AAED,WAAOM,MAAMC,OAAb;AACH,CAND;;AAQA;AACA,IAAMC,WAAW,SAAXA,QAAW,GAAU;AACvB,QAAI,CAACF,MAAME,QAAX,EAAqB;;AAEjB,YAAMC,WAAWF,SAAjB;;AAEA,YAAMG,aAAaD,SAASE,QAAT,GAAoBF,SAASE,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,CAApB,GAAmD,EAAtE;AACAF,mBAAWG,GAAX;AACAP,cAAME,QAAN,GAAiBE,WAAWI,IAAX,CAAgB,GAAhB,CAAjB;AACH;;AAED,WAAOR,MAAME,QAAb;AACH,CAXD;;AAaA;AACA,IAAMO,SAAS,SAATA,MAAS,GAAU;AACrB,QAAI,CAACT,MAAMS,MAAX,EAAmB;;AAEf,YAAMN,WAAWF,SAAjB;;AAEA,YAAIS,UAAU,KAAd;AACA,YAAIP,SAASQ,KAAT,IAAkBR,SAASQ,KAAT,CAAeC,OAArC,EAA8C;AAAA,gBACnCA,OADmC,GACxBT,SAASQ,KADe,CACnCC,OADmC;;AAE1CF,sBAAUT,QAAQU,KAAR,CAAc,SAASC,OAAvB,EAAgCN,KAAhC,CAAsC,GAAtC,EAA2C,CAA3C,CAAV;AACH;;AAEDN,cAAMS,MAAN,GAAeC,OAAf;AACH;;AAED,WAAOV,MAAMS,MAAb;AACH,CAfD;;AAiBA;AACA,IAAMlB,SAAS,SAATA,MAAS,GAAU;AACrB,QAAI,CAACS,MAAMT,MAAX,EAAmB;AACfS,cAAMT,MAAN,GAAeH,mBAAmBG,MAAlC;AACH;;AAED,WAAOS,MAAMT,MAAb;AACH,CAND;;QAQQkB,M,GAAAA,M;QAAQP,Q,GAAAA,Q;QAAUD,O,GAAAA,O;QAASV,M,GAAAA,M;;AACnC,IAAMsB,YAAY,EAACJ,cAAD,EAASP,kBAAT,EAAmBD,gBAAnB,EAA4BV,cAA5B,EAAlB;kBACesB,S","file":"tileProps.js","sourcesContent":["import {parse} from 'url'\r\nimport jive from 'jive'\r\n\r\nlet getUrlParemeters\r\n\r\nif (typeof window.gala != 'undefined') {\r\n    getUrlParemeters = function(){\r\n        return {\r\n            parent: jive.tile.getJiveURL() || '',\r\n            url: jive.tile.getAppURL() || ''\r\n        }\r\n    }\r\n} else {\r\n    const gadgets = require('jive/gadgets')\r\n    getUrlParemeters = gadgets.util.getUrlParameters\r\n}\r\n\r\nconst cache = {}\r\n\r\n// full tile url prsed as jive object\r\nconst tileUrl = function(){\r\n    if (!cache.tileUrl) {\r\n        cache.tileUrl = parse(getUrlParemeters().url, true)\r\n    }\r\n\r\n    return cache.tileUrl\r\n}\r\n\r\n//path that helps address images and other assets\r\nconst tilePath = function(){\r\n    if (!cache.tilePath) {\r\n\r\n        const _tileUrl = tileUrl()\r\n\r\n        const pathChunks = _tileUrl.pathname ? _tileUrl.pathname.split('/') : []\r\n        pathChunks.pop();\r\n        cache.tilePath = pathChunks.join('/')\r\n    }\r\n\r\n    return cache.tilePath\r\n}\r\n\r\n// if called from tile - return tile id\r\nconst tileId = function(){\r\n    if (!cache.tileId) {\r\n\r\n        const _tileUrl = tileUrl()\r\n\r\n        let _tileId = false\r\n        if (_tileUrl.query && _tileUrl.query.syn_app) {\r\n            const {syn_app} = _tileUrl.query\r\n            _tileId = tileUrl.query['ref_' + syn_app].split(':')[1]\r\n        }\r\n\r\n        cache.tileId = _tileId\r\n    }\r\n\r\n    return cache.tileId\r\n}\r\n\r\n// parent: url of a root jive instance (e.g. mysite.com instead of domain-protected apps.mysite.com)\r\nconst parent = function(){\r\n    if (!cache.parent) {\r\n        cache.parent = getUrlParemeters().parent\r\n    }\r\n\r\n    return cache.parent\r\n}\r\n\r\nexport {tileId, tilePath, tileUrl, parent}\r\nconst tileProps = {tileId, tilePath, tileUrl, parent}\r\nexport default tileProps\r\n"]}