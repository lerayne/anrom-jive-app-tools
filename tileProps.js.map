{"version":3,"sources":["src/tileProps.jsx"],"names":["getUrlParemeters","window","gala","parent","jive","tile","getJiveURL","url","getAppURL","gadgets","require","util","getUrlParameters","cache","tileUrl","tilePath","_tileUrl","pathChunks","pathname","split","pop","join","tileId","_tileId","query","syn_app","getContainerAsync","Promise","resolve","reject","place","getContainer","tileProps"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,IAAIA,yBAAJ;;AAEA,IAAI,OAAOC,OAAOC,IAAd,IAAsB,WAA1B,EAAuC;AACnCF,uBAAmB,4BAAU;AACzB,eAAO;AACHG,oBAAQC,eAAKC,IAAL,CAAUC,UAAV,MAA0B,EAD/B;AAEHC,iBAAKH,eAAKC,IAAL,CAAUG,SAAV,MAAyB;AAF3B,SAAP;AAIH,KALD;AAMH,CAPD,MAOO;AACH,QAAMC,UAAUC,QAAQ,cAAR,CAAhB;AACAV,uBAAmBS,QAAQE,IAAR,CAAaC,gBAAhC;AACH;;AAED,IAAMC,QAAQ,EAAd;;AAEA;AACA,IAAMC,UAAU,SAAVA,OAAU,GAAU;AACtB,QAAI,CAACD,MAAMC,OAAX,EAAoB;AAChBD,cAAMC,OAAN,GAAgB,gBAAMd,mBAAmBO,GAAzB,EAA8B,IAA9B,CAAhB;AACH;;AAED,WAAOM,MAAMC,OAAb;AACH,CAND;;AAQA;AACA,IAAMC,WAAW,SAAXA,QAAW,GAAU;AACvB,QAAI,CAACF,MAAME,QAAX,EAAqB;;AAEjB,YAAMC,WAAWF,SAAjB;;AAEA,YAAMG,aAAaD,SAASE,QAAT,GAAoBF,SAASE,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,CAApB,GAAmD,EAAtE;AACAF,mBAAWG,GAAX;AACAP,cAAME,QAAN,GAAiBE,WAAWI,IAAX,CAAgB,GAAhB,CAAjB;AACH;;AAED,WAAOR,MAAME,QAAb;AACH,CAXD;;AAaA;AACA,IAAMO,SAAS,SAATA,MAAS,GAAU;AACrB,QAAI,CAACT,MAAMS,MAAX,EAAmB;;AAEf,YAAMN,WAAWF,SAAjB;;AAEA,YAAIS,UAAU,KAAd;AACA,YAAIP,SAASQ,KAAT,IAAkBR,SAASQ,KAAT,CAAeC,OAArC,EAA8C;AAAA,gBACnCA,OADmC,GACxBT,SAASQ,KADe,CACnCC,OADmC;;AAE1CF,sBAAUP,SAASQ,KAAT,CAAe,SAASC,OAAxB,EAAiCN,KAAjC,CAAuC,GAAvC,EAA4C,CAA5C,CAAV;AACH;;AAEDN,cAAMS,MAAN,GAAeC,OAAf;AACH;;AAED,WAAOV,MAAMS,MAAb;AACH,CAfD;;AAiBA;AACA,IAAMnB,SAAS,SAATA,MAAS,GAAU;AACrB,QAAI,CAACU,MAAMV,MAAX,EAAmB;AACfU,cAAMV,MAAN,GAAeH,mBAAmBG,MAAlC;AACH;;AAED,WAAOU,MAAMV,MAAb;AACH,CAND;;AAQA,IAAMuB,oBAAoB,SAApBA,iBAAoB,GAAU;AAChC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,YAAIhB,MAAMiB,KAAV,EAAiB;AACbF,oBAAQf,MAAMiB,KAAd;AACH,SAFD,MAEO;AACH1B,2BAAKC,IAAL,CAAU0B,YAAV,CAAuB,iBAAS;AAC5BlB,sBAAMiB,KAAN,GAAcA,KAAd;AACAF,wBAAQE,KAAR;AACH,aAHD;AAIH;AACJ,KAVM,CAAP;AAWH,CAZD;;QAcQR,M,GAAAA,M;QAAQP,Q,GAAAA,Q;QAAUD,O,GAAAA,O;QAASX,M,GAAAA,M;QAAQuB,iB,GAAAA,iB;;AAC3C,IAAMM,YAAY,EAACV,cAAD,EAASP,kBAAT,EAAmBD,gBAAnB,EAA4BX,cAA5B,EAAoCuB,oCAApC,EAAlB;kBACeM,S","file":"tileProps.js","sourcesContent":["import {parse} from 'url'\nimport jive from 'jive'\n\nlet getUrlParemeters\n\nif (typeof window.gala != 'undefined') {\n    getUrlParemeters = function(){\n        return {\n            parent: jive.tile.getJiveURL() || '',\n            url: jive.tile.getAppURL() || ''\n        }\n    }\n} else {\n    const gadgets = require('jive/gadgets')\n    getUrlParemeters = gadgets.util.getUrlParameters\n}\n\nconst cache = {}\n\n// full tile url prsed as jive object\nconst tileUrl = function(){\n    if (!cache.tileUrl) {\n        cache.tileUrl = parse(getUrlParemeters().url, true)\n    }\n\n    return cache.tileUrl\n}\n\n//path that helps address images and other assets\nconst tilePath = function(){\n    if (!cache.tilePath) {\n\n        const _tileUrl = tileUrl()\n\n        const pathChunks = _tileUrl.pathname ? _tileUrl.pathname.split('/') : []\n        pathChunks.pop();\n        cache.tilePath = pathChunks.join('/')\n    }\n\n    return cache.tilePath\n}\n\n// if called from tile - return tile id\nconst tileId = function(){\n    if (!cache.tileId) {\n\n        const _tileUrl = tileUrl()\n\n        let _tileId = false\n        if (_tileUrl.query && _tileUrl.query.syn_app) {\n            const {syn_app} = _tileUrl.query\n            _tileId = _tileUrl.query['ref_' + syn_app].split(':')[1]\n        }\n\n        cache.tileId = _tileId\n    }\n\n    return cache.tileId\n}\n\n// parent: url of a root jive instance (e.g. mysite.com instead of domain-protected apps.mysite.com)\nconst parent = function(){\n    if (!cache.parent) {\n        cache.parent = getUrlParemeters().parent\n    }\n\n    return cache.parent\n}\n\nconst getContainerAsync = function(){\n    return new Promise((resolve, reject) => {\n\n        if (cache.place) {\n            resolve(cache.place)\n        } else {\n            jive.tile.getContainer(place => {\n                cache.place = place\n                resolve(place)\n            })\n        }\n    })\n}\n\nexport {tileId, tilePath, tileUrl, parent, getContainerAsync}\nconst tileProps = {tileId, tilePath, tileUrl, parent, getContainerAsync}\nexport default tileProps\n"]}