{"version":3,"sources":["src/fetchPromise.es6"],"names":["entries","createBatchEntry","batchObjectToArray","promiseSingleBatch","resolve","reject","batch","osapi","newBatch","forEach","entry","i","id","request","add","execute","response","error","batchResponseObject","map","content","length","entryArrays","Math","ceil","results","concat","promiseBatch","promiseOsapiRequest","promiseHttpGet","promiseHttpPost","promiseRestGet","promiseRestPost","promiseRestDelete","promiseRestPut","osapiRequestFunc","jive","corev3","args","http","get","post","href","core","v","promiseRestRequest","console","warn","options","delete","put","CurrentPlace","filter","_filter","place","rawPlace","placeID","uri","resources","self","ref","html","name","type","tile","getContainer","fetchPromise","promiseOsapiPollingRequest"],"mappings":"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","file":"fetchPromise.js","sourcesContent":["/**\n * Created by M. Yegorov on 2016-12-27.\n */\n\nimport osapi from 'jive/osapi'\nimport jive from 'jive'\nimport 'core-js/fn/object/keys'\nimport 'core-js/fn/array/concat'\nimport 'core-js/fn/array/map'\nimport 'core-js/fn/array/for-each'\n\nimport {promiseOsapiPollingRequest} from './deprecated'\nimport {unescapeHtmlEntities, pause, splitArray} from './utils'\n\n\nexport function promiseOsapiRequest(osapiRequestFunc){\n    return new Promise((resolve, reject) => {\n\n        const request = (typeof osapiRequestFunc === 'function') ? osapiRequestFunc(osapi.jive.corev3) : osapiRequestFunc;\n\n        request.execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\n\nexport function promiseHttpGet(...args){\n    return new Promise ((resolve, reject) => {\n\n        osapi.http.get(...args).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseHttpPost(...args){\n    return new Promise ((resolve, reject) => {\n\n        osapi.http.post(...args).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestGet(href) {\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.get({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport const promiseRestRequest = function(href){\n    console.warn('Use of promiseRestRequest is deprecated, use promiseRestGet instead')\n    return promiseRestGet(href)\n}\n\n/**\n *\n * @param href\n * @param options - body, type, etc\n * @returns {Promise<any>}\n */\nexport function promiseRestPost(href, options = {}) {\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.post({\n            v:'v3',\n            href,\n            ...options\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestDelete(href) {\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.delete({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestPut(href) {\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.put({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport async function promiseBatch(entries, createBatchEntry){\n\n    function batchObjectToArray(batchResponseObject){\n        return Object.keys(batchResponseObject).map(id => ({id, content: batchResponseObject[id]}))\n    }\n\n    function promiseSingleBatch(entries, createBatchEntry){\n        return new Promise((resolve, reject) => {\n\n            let batch = osapi.newBatch()\n\n            entries.forEach((entry, i) => {\n                const {id, request} = createBatchEntry(entry, i)\n                batch.add(id, request)\n            })\n\n            batch.execute(response => {\n                if (response.error) reject(response)\n                else resolve(response)\n            })\n        })\n    }\n\n    if (entries.length <= 30) {\n        return batchObjectToArray(await promiseSingleBatch(entries, createBatchEntry))\n\n    } else {\n\n        const entryArrays = splitArray(entries, Math.ceil(entries.length / 30))\n        let results = []\n        let response = false\n\n        for (let i = 0; i < entryArrays.length; i++){\n            response = await promiseSingleBatch(entryArrays[i], createBatchEntry)\n\n            results = results.concat(batchObjectToArray(response))\n\n            await pause((i+1) % 4 === 0 ? 11000 : 1000)\n        }\n\n        return results\n    }\n}\n\nexport class CurrentPlace {\n    place = false\n\n    constructor(filter = this._filter){\n        this.filter = filter\n    }\n\n    _filter(rawPlace){\n        return {\n            id: rawPlace.placeID,\n            uri: rawPlace.resources.self.ref,\n            html: rawPlace.resources.html.ref,\n            name: unescapeHtmlEntities(rawPlace.name),\n            type: 'place'\n        }\n    }\n\n    fetch(){\n        return new Promise(resolve => {\n\n            if (this.place) {\n                resolve(this.place)\n                return null\n            }\n\n            jive.tile.getContainer(place => {\n                this.place = this.filter(place)\n                resolve(this.place)\n            })\n        })\n    }\n}\n\n//export const currentPlace = new CurrentPlace()\n\nconst fetchPromise = {\n    promiseHttpGet,\n    promiseHttpPost,\n    promiseOsapiRequest,\n    promiseRestGet,\n    promiseRestPost,\n    promiseRestPut,\n    promiseRestDelete,\n    promiseRestRequest,\n    promiseOsapiPollingRequest,\n    promiseBatch,\n    CurrentPlace,\n    //currentPlace,\n}\n\nexport default fetchPromise"]}