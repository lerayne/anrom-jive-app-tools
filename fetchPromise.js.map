{"version":3,"sources":["src/fetchPromise.jsx"],"names":["promiseOsapiRequest","promiseRestRequest","promiseHttpGet","promiseHttpPost","osapiRequestFunc","Promise","resolve","reject","request","jive","corev3","execute","response","error","href","core","get","v","args","http","result","post","fetchPromise"],"mappings":";;;;;QAMgBA,mB,GAAAA,mB;QAeAC,kB,GAAAA,kB;QAeAC,c,GAAAA,c;QAYAC,e,GAAAA,e;;AA5ChB;;;;;;AAEO,SAASH,mBAAT,CAA6BI,gBAA7B,EAA8C;AACjD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,YAAMC,UAAU,OAAOJ,gBAAP,IAA2B,UAA3B,GAAwCA,iBAAiB,gBAAMK,IAAN,CAAWC,MAA5B,CAAxC,GAA8EN,gBAA9F;;AAEAI,gBAAQG,OAAR,CAAgB,oBAAY;AACxB,gBAAIC,SAASC,KAAb,EAAoB;AAChBN,uBAAO,EAACM,OAAOD,SAASC,KAAjB,EAAP;AACH,aAFD,MAEO;AACHP,wBAAQM,QAAR;AACH;AACJ,SAND;AAOH,KAXM,CAAP;AAYH,C,CAnBD;;;;AAqBO,SAASX,kBAAT,CAA4Ba,IAA5B,EAAiC;AACpC,WAAO,IAAIT,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAME,IAAN,CAAWM,IAAX,CAAgBC,GAAhB,CAAoB;AAChBC,eAAE,IADc;AAEhBH;AAFgB,SAApB,EAGGH,OAHH,CAGW,oBAAY;AACnB,gBAAI,CAACC,SAASC,KAAd,EAAqB;AACjBP,wBAAQM,QAAR;AACH,aAFD,MAEO;AACHL,uBAAOK,QAAP;AACH;AACJ,SATD;AAUH,KAXM,CAAP;AAYH;;AAEM,SAASV,cAAT,GAAgC;AAAA,sCAALgB,IAAK;AAALA,YAAK;AAAA;;AACnC,WAAO,IAAIb,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA;;AAErC,uCAAMY,IAAN,EAAWH,GAAX,oBAAkBE,IAAlB,EAAwBP,OAAxB,CAAgC,kBAAU;AACtC,gBAAIS,OAAOP,KAAX,EAAkBN,OAAOa,OAAOP,KAAd,EAAlB,KACK;AACDP,wBAAQc,MAAR;AACH;AACJ,SALD;AAMH,KARM,CAAP;AASH;;AAEM,SAASjB,eAAT,GAAiC;AAAA,uCAALe,IAAK;AAALA,YAAK;AAAA;;AACpC,WAAO,IAAIb,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA;;AAErC,wCAAMY,IAAN,EAAWE,IAAX,qBAAmBH,IAAnB,EAAyBP,OAAzB,CAAiC,kBAAU;AACvC,gBAAIS,OAAOP,KAAX,EAAkBN,OAAOa,OAAOP,KAAd,EAAlB,KACK;AACDP,wBAAQc,MAAR;AACH;AACJ,SALD;AAMH,KARM,CAAP;AASH;;AAED,IAAME,eAAe,EAACpB,8BAAD,EAAiBC,gCAAjB,EAAkCH,wCAAlC,EAAuDC,sCAAvD,EAArB;;kBAEeqB,Y","file":"fetchPromise.js","sourcesContent":["/**\r\n * Created by M. Yegorov on 2016-12-27.\r\n */\r\n\r\nimport osapi from 'jive/osapi';\r\n\r\nexport function promiseOsapiRequest(osapiRequestFunc){\r\n    return new Promise((resolve, reject) => {\r\n\r\n        const request = typeof osapiRequestFunc == 'function' ? osapiRequestFunc(osapi.jive.corev3) : osapiRequestFunc;\r\n\r\n        request.execute(response => {\r\n            if (response.error) {\r\n                reject({error: response.error})\r\n            } else {\r\n                resolve(response)\r\n            }\r\n        })\r\n    });\r\n}\r\n\r\nexport function promiseRestRequest(href){\r\n    return new Promise((resolve, reject) => {\r\n        osapi.jive.core.get({\r\n            v:'v3',\r\n            href\r\n        }).execute(response => {\r\n            if (!response.error) {\r\n                resolve(response)\r\n            } else {\r\n                reject(response)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function promiseHttpGet(...args){\r\n    return new Promise ((resolve, reject) => {\r\n\r\n        osapi.http.get(...args).execute(result => {\r\n            if (result.error) reject(result.error);\r\n            else {\r\n                resolve(result);\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function promiseHttpPost(...args){\r\n    return new Promise ((resolve, reject) => {\r\n\r\n        osapi.http.post(...args).execute(result => {\r\n            if (result.error) reject(result.error);\r\n            else {\r\n                resolve(result);\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nconst fetchPromise = {promiseHttpGet, promiseHttpPost, promiseOsapiRequest, promiseRestRequest}\r\n\r\nexport default fetchPromise"]}