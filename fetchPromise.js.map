{"version":3,"sources":["src/fetchPromise.es6"],"names":["items","createBatchEntry","j","batch","map","item","i","promiseRestPost","type","body","response","content","id","singleRestBatch","entries","optionsArgument","defaultOptions","maxEntries","options","maxEntriesPerBatch","length","batchObjectToArray","singleOsapiBatch","entryArrays","Math","ceil","results","concat","promiseBatch","promiseRestBatch","promiseOsapiBatch","promiseOsapiRequest","promiseHttpGet","promiseHttpPost","promiseRestGet","promiseRestDelete","promiseRestPut","jive","window","osapi","osapiRequestFunc","resolve","reject","request","corev3","execute","error","args","http","get","post","href","includes","split","core","v","promiseRestRequest","console","warn","delete","put","newBatch","forEach","entry","executable","add","batchResponse","returnObject","key","status","data","undefined","CurrentPlace","filter","_filter","place","rawPlace","placeID","uri","resources","self","ref","html","name","tile","getContainer","fetchPromise","promiseOsapiPollingRequest"],"mappings":"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","file":"fetchPromise.js","sourcesContent":["/**\n * Created by M. Yegorov on 2016-12-27.\n */\n\nimport 'core-js/fn/object/keys'\nimport 'core-js/fn/array/concat'\nimport 'core-js/fn/array/map'\nimport 'core-js/fn/array/for-each'\n\nconst jive = window.jive\nconst osapi = window.osapi\n\nimport {promiseOsapiPollingRequest} from './deprecated'\nimport {unescapeHtmlEntities, pause, splitArray} from './utils'\n\n\nexport function promiseOsapiRequest(osapiRequestFunc){\n    return new Promise((resolve, reject) => {\n\n        const request = (typeof osapiRequestFunc === 'function') ? osapiRequestFunc(osapi.jive.corev3) : osapiRequestFunc;\n\n        request.execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\n\nexport function promiseHttpGet(...args){\n    return new Promise ((resolve, reject) => {\n\n        osapi.http.get(...args).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseHttpPost(...args){\n    return new Promise ((resolve, reject) => {\n\n        osapi.http.post(...args).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestGet(href) {\n\n    if (href.includes(\"/api/core/v3/\")) {\n        href = href.split(\"/api/core/v3\")[1]\n    }\n\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.get({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport const promiseRestRequest = function(href){\n    console.warn('Use of promiseRestRequest is deprecated, use promiseRestGet instead')\n    return promiseRestGet(href)\n}\n\n/**\n *\n * @param href\n * @param options - body, type, etc\n * @returns {Promise<any>}\n */\nexport function promiseRestPost(href, options = {}) {\n\n    if (href.includes(\"/api/core/v3/\")) {\n        href = href.split(\"/api/core/v3\")[1]\n    }\n\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.post({\n            v:'v3',\n            href,\n            ...options\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestDelete(href) {\n\n    if (href.includes(\"/api/core/v3/\")) {\n        href = href.split(\"/api/core/v3\")[1]\n    }\n\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.delete({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestPut(href) {\n\n    if (href.includes(\"/api/core/v3/\")) {\n        href = href.split(\"/api/core/v3\")[1]\n    }\n\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.put({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\n\nfunction singleOsapiBatch(entries, createBatchEntry, j = 0) {\n    return new Promise((resolve, reject) => {\n\n        let batch = osapi.newBatch()\n\n        entries.forEach((entry, i) => {\n            const [id, executable] = createBatchEntry(entry, i, j)\n            batch.add(id, executable)\n        })\n\n        batch.execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nfunction batchObjectToArray(batchResponse) {\n    //console.log('batchObjectToArray', batchResponse)\n\n    return Object.keys(batchResponse).map(key => {\n\n        let returnObject = {\n            id: key,\n            status: (typeof batchResponse[key].status === \"number\") ? batchResponse[key].status : 200\n        }\n\n        if (batchResponse[key].error) {\n            returnObject.error = batchResponse[key].error\n        } else {\n            returnObject.data = (batchResponse[key].content && batchResponse[key].content.id !== undefined)\n                ? batchResponse[key].content\n                : batchResponse[key]\n        }\n\n        return returnObject\n    })\n}\n\nasync function singleRestBatch(items, createBatchEntry, j=0){\n    const batch = items.map((item, i) => createBatchEntry(item, i, j))\n\n    const response = await promiseRestPost('/executeBatch', {\n        type: \"application/json\",\n        body: batch\n    })\n\n    return (response.content && response.content.id) ? response.content : response\n}\n\n/**\n * promiseOsapiBatch\n *\n * @param entries - any array based on which you want to build a batch\n * @param createBatchEntry - a func that takes a single entry and its index from the array above\n * and returns an object with the fields \"id\" and \"request\". \"id\" should be a unique id of the\n * request and \"request\" should be an OSAPI executable\n * @returns {Promise<Array>}\n */\nasync function promiseBatch(type = 'rest', entries, createBatchEntry, optionsArgument = {}) {\n\n    const defaultOptions = {\n        maxEntries: 25\n    }\n\n    const options = {...defaultOptions, ...optionsArgument}\n\n    //console.time('batch')\n\n    //no more than 25! Jive hard limit\n    const maxEntriesPerBatch = options.maxEntries < 25 ? options.maxEntries : 25\n\n    if (entries.length <= maxEntriesPerBatch) {\n\n        if (type === 'osapi') return batchObjectToArray(await singleOsapiBatch(entries, createBatchEntry))\n        if (type === 'rest') return await singleRestBatch(entries, createBatchEntry)\n\n        //console.timeEnd('batch')\n\n    } else {\n\n        const entryArrays = splitArray(entries, Math.ceil(entries.length / maxEntriesPerBatch))\n        let results = []\n        let response = false\n\n        for (let i = 0; i < entryArrays.length; i++) {\n\n            if (type === 'osapi') {\n                response = await singleOsapiBatch(entryArrays[i], createBatchEntry, i)\n                results = results.concat(batchObjectToArray(response))\n            }\n            if (type === 'rest') {\n                response = await singleRestBatch(entryArrays[i], createBatchEntry, i)\n                results = results.concat(response)\n            }\n\n            // make 1 sec pause after each request an 11 sec pause each 4 requests to bypass jive's\n            // request frequency limitation\n            // but only if this is not the last query\n            if (i < entryArrays.length - 1) {\n                await pause((i + 1) % 4 === 0 ? 11000 : 1000)\n            }\n        }\n\n        //console.timeEnd('batch')\n\n        return results\n    }\n}\n\nexport async function promiseRestBatch(entries, createBatchEntry, options = {}) {\n    return await promiseBatch('rest', entries, createBatchEntry, options)\n}\n\nexport async function promiseOsapiBatch(entries, createBatchEntry, options = {}) {\n    return await promiseBatch('osapi', entries, createBatchEntry, options)\n}\n\nexport class CurrentPlace {\n    place = false\n\n    constructor(filter = this._filter){\n        this.filter = filter\n    }\n\n    _filter(rawPlace){\n        return {\n            id: rawPlace.placeID,\n            uri: rawPlace.resources.self.ref,\n            html: rawPlace.resources.html.ref,\n            name: unescapeHtmlEntities(rawPlace.name),\n            type: 'place'\n        }\n    }\n\n    fetch(){\n        return new Promise(resolve => {\n\n            if (this.place) {\n                resolve(this.place)\n                return null\n            }\n\n            jive.tile.getContainer(place => {\n                this.place = this.filter(place)\n                resolve(this.place)\n            })\n        })\n    }\n}\n\n//export const currentPlace = new CurrentPlace()\n\nconst fetchPromise = {\n    promiseHttpGet,\n    promiseHttpPost,\n    promiseOsapiRequest,\n    promiseRestGet,\n    promiseRestPost,\n    promiseRestPut,\n    promiseRestDelete,\n    promiseRestRequest,\n    promiseOsapiPollingRequest,\n    promiseOsapiBatch,\n    promiseRestBatch,\n    CurrentPlace,\n    //currentPlace,\n}\n\nexport default fetchPromise"]}