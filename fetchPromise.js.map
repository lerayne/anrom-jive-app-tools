{"version":3,"sources":["fetchPromise.es6"],"names":["jive","window","osapi","extractContent","response","content","id","undefined","Array","list","promiseOsapiRequest","osapiRequestFunc","Promise","resolve","reject","request","corev3","execute","error","promiseHttpGet","args","http","get","promiseHttpPost","post","promiseRestGet","href","includes","split","core","v","promiseRestRequest","console","warn","promiseRestPost","options","promiseRestDelete","promiseRestPut","put","singleOsapiBatch","entries","createBatchEntry","j","batch","newBatch","forEach","entry","i","executable","add","batchObjectToArray","batchResponse","Object","keys","map","key","returnObject","status","data","singleRestBatch","items","item","type","body","promiseBatch","optionsArgument","defaultOptions","maxEntries","shouldBatchContinue","singleRestBatchFunc","maxEntriesPerBatch","length","entryArrays","results","responseArray","concat","promiseRestBatch","promiseOsapiBatch","CurrentPlace","filter","_filter","rawPlace","placeID","uri","resources","self","ref","html","name","place","tile","getContainer","fetchPromise","promiseOsapiPollingRequest"],"mappings":"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","sourcesContent":["/**\n * Created by M. Yegorov on 2016-12-27.\n */\n\nconst jive = window.jive\nconst osapi = window.osapi\n\nimport {promiseOsapiPollingRequest} from './deprecated'\nimport {unescapeHtmlEntities, pause, sliceArray} from './utils'\n\nexport function extractContent(response) {\n\n    if (!response.content) return response\n\n    if (response.content.id !== undefined) return response.content\n    if (response.content instanceof Array) return response.content\n    if (response.content.list) return response.content\n\n    return response\n}\n\nexport function promiseOsapiRequest(osapiRequestFunc){\n    return new Promise((resolve, reject) => {\n\n        const request = (typeof osapiRequestFunc === 'function') ? osapiRequestFunc(osapi.jive.corev3) : osapiRequestFunc;\n\n        request.execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\n\nexport function promiseHttpGet(...args){\n    return new Promise ((resolve, reject) => {\n\n        osapi.http.get(...args).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseHttpPost(...args){\n    return new Promise ((resolve, reject) => {\n\n        osapi.http.post(...args).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestGet(href) {\n\n    if (href.includes(\"/api/core/v3/\")) {\n        href = href.split(\"/api/core/v3\")[1]\n    }\n\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.get({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport const promiseRestRequest = function(href){\n    console.warn('Use of promiseRestRequest is deprecated, use promiseRestGet instead')\n    return promiseRestGet(href)\n}\n\n/**\n *\n * @param href\n * @param options - body, type, etc\n * @returns {Promise<any>}\n */\nexport function promiseRestPost(href, options = {}) {\n\n    if (href.includes(\"/api/core/v3/\")) {\n        href = href.split(\"/api/core/v3\")[1]\n    }\n\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.post({\n            v:'v3',\n            href,\n            ...options\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestDelete(href) {\n\n    if (href.includes(\"/api/core/v3/\")) {\n        href = href.split(\"/api/core/v3\")[1]\n    }\n\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.delete({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestPut(href) {\n\n    if (href.includes(\"/api/core/v3/\")) {\n        href = href.split(\"/api/core/v3\")[1]\n    }\n\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.put({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\n\nfunction singleOsapiBatch(entries, createBatchEntry, j = 0) {\n    return new Promise((resolve, reject) => {\n\n        let batch = osapi.newBatch()\n\n        entries.forEach((entry, i) => {\n            const [id, executable] = createBatchEntry(entry, i, j)\n            batch.add(id, executable)\n        })\n\n        batch.execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nfunction batchObjectToArray(batchResponse) {\n    //console.log('batchObjectToArray', batchResponse)\n\n    return Object.keys(batchResponse).map(key => {\n\n        let returnObject = {\n            id: key,\n            status: (typeof batchResponse[key].status === \"number\") ? batchResponse[key].status : 200\n        }\n\n        if (batchResponse[key].error) {\n            returnObject.error = batchResponse[key].error\n        } else {\n            returnObject.data = extractContent(batchResponse[key])\n        }\n\n        return returnObject\n    })\n}\n\nasync function singleRestBatch(items, createBatchEntry, j=0){\n    const batch = items.map((item, i) => createBatchEntry(item, i, j))\n\n    const response = await promiseRestPost('/executeBatch', {\n        type: \"application/json\",\n        body: batch\n    })\n\n    return extractContent(response)\n}\n\n/**\n * promiseOsapiBatch\n *\n * @param entries - any array based on which you want to build a batch\n * @param createBatchEntry - a func that takes a single entry and its index from the array above\n * and returns an object with the fields \"id\" and \"request\". \"id\" should be a unique id of the\n * request and \"request\" should be an OSAPI executable\n * @returns {Promise<Array>}\n */\nasync function promiseBatch(type = 'rest', entries, createBatchEntry, optionsArgument = {}) {\n\n    const defaultOptions = {\n        maxEntries: 25,\n        shouldBatchContinue: null,\n        singleRestBatchFunc: singleRestBatch\n    }\n\n    const options = {...defaultOptions, ...optionsArgument}\n\n    //console.time('batch')\n\n    //no more than 25! Jive hard limit\n    const maxEntriesPerBatch = options.maxEntries < 25 ? options.maxEntries : 25\n\n    if (entries.length <= maxEntriesPerBatch) {\n\n        if (type === 'osapi') return batchObjectToArray(await singleOsapiBatch(entries, createBatchEntry))\n        if (type === 'rest') return await options.singleRestBatchFunc(entries, createBatchEntry)\n\n        //console.timeEnd('batch')\n\n    } else {\n\n        const entryArrays = sliceArray(entries, maxEntriesPerBatch)\n        let results = []\n        let responseArray\n\n        for (let i = 0; i < entryArrays.length; i++) {\n            if (type === 'osapi') {\n                const response = await singleOsapiBatch(entryArrays[i], createBatchEntry, i)\n                responseArray = batchObjectToArray(response)\n            }\n            if (type === 'rest') {\n                responseArray = await options.singleRestBatchFunc(entryArrays[i], createBatchEntry, i)\n            }\n\n            results = results.concat(responseArray)\n\n            //if function is defined and it returns false - stop the cycle!\n            if (options.shouldBatchContinue && !options.shouldBatchContinue(responseArray, results)){\n              break\n            }\n\n            // make 1 sec pause after each request an 11 sec pause each 4 requests to bypass jive's\n            // request frequency limitation\n            // but only if this is not the last query\n            if (i < entryArrays.length - 1) {\n                await pause((i + 1) % 4 === 0 ? 11000 : 1000)\n            }\n        }\n\n        //console.timeEnd('batch')\n\n        return results\n    }\n}\n\nexport async function promiseRestBatch(entries, createBatchEntry, options = {}) {\n    return await promiseBatch('rest', entries, createBatchEntry, options)\n}\n\nexport async function promiseOsapiBatch(entries, createBatchEntry, options = {}) {\n    return await promiseBatch('osapi', entries, createBatchEntry, options)\n}\n\nexport class CurrentPlace {\n    place = false\n\n    constructor(filter = this._filter){\n        this.filter = filter\n    }\n\n    _filter(rawPlace){\n        return {\n            id: rawPlace.placeID,\n            uri: rawPlace.resources.self.ref,\n            html: rawPlace.resources.html.ref,\n            name: unescapeHtmlEntities(rawPlace.name),\n            type: 'place'\n        }\n    }\n\n    fetch(){\n        return new Promise(resolve => {\n\n            if (this.place) {\n                resolve(this.place)\n                return null\n            }\n\n            jive.tile.getContainer(place => {\n                this.place = this.filter(place)\n                resolve(this.place)\n            })\n        })\n    }\n}\n\n//export const currentPlace = new CurrentPlace()\n\nconst fetchPromise = {\n    promiseHttpGet,\n    promiseHttpPost,\n    promiseOsapiRequest,\n    promiseRestGet,\n    promiseRestPost,\n    promiseRestPut,\n    promiseRestDelete,\n    promiseRestRequest,\n    promiseOsapiPollingRequest,\n    promiseOsapiBatch,\n    promiseRestBatch,\n    CurrentPlace,\n    extractContent\n    //currentPlace,\n}\n\nexport default fetchPromise"],"file":"fetchPromise.js"}