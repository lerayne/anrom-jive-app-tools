{"version":3,"sources":["src/fetchPromise.jsx"],"names":["entries","createBatchEntry","batchObjectToArray","promiseSingleBatch","Promise","resolve","reject","batch","osapi","newBatch","forEach","entry","i","id","request","add","execute","response","error","batchResponseObject","Object","keys","map","content","length","entryArrays","splitArray","Math","ceil","results","concat","pause","promiseBatch","promiseOsapiRequest","promiseOsapiPollingRequest","promiseRestRequest","promiseRestPost","promiseHttpGet","promiseHttpPost","delay","setTimeout","array","chunksNumber","newArray","push","undefined","chunkLength","item","chunkNumber","floor","osapiRequestFunc","jive","corev3","filterFunction","targetNumber","maxIterationCount","list","iteration","getNextChunk","executable","then","getNextPage","reason","filter","catch","href","core","get","v","promiseRestGet","post","args","http","fetchPromise"],"mappings":"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","file":"fetchPromise.js","sourcesContent":["/**\n * Created by M. Yegorov on 2016-12-27.\n */\n\nimport osapi from 'jive/osapi'\nimport 'core-js/fn/object/keys'\nimport 'core-js/fn/array/concat'\nimport 'core-js/fn/array/map'\nimport 'core-js/fn/array/foreach'\nimport 'regenerator-runtime/runtime'\n\nfunction pause(delay){\n    return new Promise(resolve => {\n        setTimeout(resolve, delay)\n    })\n}\n\nfunction splitArray(array, chunksNumber) {\n    const newArray = []\n\n    for (let i = 0; i < chunksNumber; i++){\n        newArray.push([])\n    }\n\n    if (array !== undefined && array.length){\n        const chunkLength = Math.ceil(array.length / chunksNumber)\n\n        array.forEach((item, i) => {\n            const chunkNumber = Math.floor(i / chunkLength)\n            newArray[chunkNumber].push(item)\n        })\n    }\n\n    return newArray\n}\n\nexport function promiseOsapiRequest(osapiRequestFunc){\n    return new Promise((resolve, reject) => {\n\n        const request = typeof osapiRequestFunc === 'function' ? osapiRequestFunc(osapi.jive.corev3) : osapiRequestFunc;\n\n        request.execute(response => {\n            if (response.error) {\n                reject(response)\n            } else {\n                resolve(response)\n            }\n        })\n    })\n}\n\n/**\n * todo: нормальная реализация, если надо сделать загрузку один раз, но будет плохо работать если нужна догрузка:\n * возвращает не запрошенное количество, а больший кусок. Нужно придумать вариант, при котором вместо родного\n * getNextPage используется собственный promiseNextPage, в котором содержатся рекурсия на сам promiseOsapiPollingRequest\n * и остаток списка\n */\n\nexport function promiseOsapiPollingRequest(osapiRequestFunc, filterFunction, targetNumber, maxIterationCount = 0) {\n    return new Promise((resolve, reject) => {\n\n        let list = []\n        let iteration = 0\n\n        function getNextChunk(executable) {\n\n            iteration++\n\n            promiseOsapiRequest(executable).then(response => {\n\n                const getNextPage = response.getNextPage || false\n\n                //todo: собственно начало работы над промисом остатка\n                /*const promiseNextPage = function(){\n                 return new Promise((resolve2, reject2) => {\n                 if (list.length >= targetNumber) {\n\n                 }\n                 })\n                 }*/\n\n                if (!response.list.length) {\n\n                    resolve({list, reason: 'no results'})\n\n                } else {\n\n                    list = [...list, ...response.list.filter(filterFunction)]\n\n                    if (list.length >= targetNumber) {\n\n                        resolve({list, getNextPage, reason: `target number reached (on iteration ${iteration})`})\n\n                    } else {\n\n                        if (maxIterationCount === 0 || iteration <= maxIterationCount) {\n\n                            if (getNextPage) {\n\n                                // recursion here\n                                getNextChunk(getNextPage)\n\n                            } else {\n                                resolve({list, reason: 'list end reached'})\n                            }\n\n                        } else {\n                            resolve({list, getNextPage, reason: 'maximum iteration count reached'})\n                        }\n                    }\n                }\n\n            }).catch(reject)\n        }\n\n        getNextChunk(osapiRequestFunc)\n    })\n}\n\nexport function promiseRestRequest(href) {\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.get({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) {\n                reject(response)\n            } else {\n                resolve(response)\n            }\n        })\n    })\n}\n\nexport const promiseRestGet = promiseRestRequest\n\nexport function promiseRestPost(href) {\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.post({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) {\n                reject(response)\n            } else {\n                resolve(response)\n            }\n        })\n    })\n}\n\nexport function promiseHttpGet(...args){\n    return new Promise ((resolve, reject) => {\n\n        osapi.http.get(...args).execute(response => {\n            if (response.error) {\n                reject(response)\n            } else {\n                resolve(response)\n            }\n        })\n    })\n}\n\nexport function promiseHttpPost(...args){\n    return new Promise ((resolve, reject) => {\n\n        osapi.http.post(...args).execute(response => {\n            if (response.error) {\n                reject(response)\n            } else {\n                resolve(response)\n            }\n        })\n    })\n}\n\nexport async function promiseBatch(entries, createBatchEntry){\n\n    function batchObjectToArray(batchResponseObject){\n        return Object.keys(batchResponseObject).map(id => ({id, content: batchResponseObject[id]}))\n    }\n\n    function promiseSingleBatch(entries, createBatchEntry){\n        return new Promise((resolve, reject) => {\n\n            let batch = osapi.newBatch()\n\n            entries.forEach((entry, i) => {\n                const {id, request} = createBatchEntry(entry, i)\n                batch.add(id, request)\n            })\n\n            batch.execute(response => {\n                if (response.error) {\n                    reject(response)\n                } else {\n                    resolve(response)\n                }\n            })\n        })\n    }\n\n    if (entries.length <= 30) {\n        return batchObjectToArray(await promiseSingleBatch(entries, createBatchEntry))\n\n    } else {\n\n        const entryArrays = splitArray(entries, Math.ceil(entries.length / 30))\n        let results = []\n        let response = false\n\n        for (let i = 0; i < entryArrays.length; i++){\n            response = await promiseSingleBatch(entryArrays[i], createBatchEntry)\n\n            results = results.concat(batchObjectToArray(response))\n\n            await pause((i+1) % 4 === 0 ? 11000 : 1000)\n        }\n\n        return results\n    }\n}\n\n\nconst fetchPromise = {\n    promiseHttpGet,\n    promiseHttpPost,\n    promiseOsapiRequest,\n    promiseRestGet,\n    promiseRestPost,\n    promiseRestRequest,\n    promiseOsapiPollingRequest,\n    promiseBatch\n}\n\nexport default fetchPromise"]}