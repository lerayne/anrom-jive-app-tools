{"version":3,"sources":["src/fetchPromise.es6"],"names":["entries","createBatchEntry","batchObjectToArray","promiseSingleBatch","resolve","reject","batch","osapi","newBatch","forEach","entry","i","id","request","add","execute","response","error","batchResponseObject","map","content","length","entryArrays","splitArray","Math","ceil","results","concat","pause","promiseBatch","promiseOsapiRequest","promiseHttpGet","promiseHttpPost","promiseRestGet","promiseRestPost","promiseRestDelete","promiseRestPut","delay","setTimeout","array","chunksNumber","newArray","push","undefined","chunkLength","item","chunkNumber","floor","osapiRequestFunc","jive","corev3","args","http","get","post","href","core","v","promiseRestRequest","console","warn","delete","put","fetchPromise","promiseOsapiPollingRequest"],"mappings":"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","file":"fetchPromise.js","sourcesContent":["/**\n * Created by M. Yegorov on 2016-12-27.\n */\n\nimport osapi from 'jive/osapi'\nimport 'core-js/fn/object/keys'\nimport 'core-js/fn/array/concat'\nimport 'core-js/fn/array/map'\nimport 'core-js/fn/array/for-each'\n\nimport {promiseOsapiPollingRequest} from './deprecated'\n\nfunction pause(delay){\n    return new Promise(resolve => setTimeout(resolve, delay))\n}\n\nfunction splitArray(array, chunksNumber) {\n    const newArray = []\n\n    for (let i = 0; i < chunksNumber; i++){\n        newArray.push([])\n    }\n\n    if (array !== undefined && array.length){\n        const chunkLength = Math.ceil(array.length / chunksNumber)\n\n        array.forEach((item, i) => {\n            const chunkNumber = Math.floor(i / chunkLength)\n            newArray[chunkNumber].push(item)\n        })\n    }\n\n    return newArray\n}\n\nexport function promiseOsapiRequest(osapiRequestFunc){\n    return new Promise((resolve, reject) => {\n\n        const request = typeof osapiRequestFunc === 'function' ? osapiRequestFunc(osapi.jive.corev3) : osapiRequestFunc;\n\n        request.execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\n\nexport function promiseHttpGet(...args){\n    return new Promise ((resolve, reject) => {\n\n        osapi.http.get(...args).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseHttpPost(...args){\n    return new Promise ((resolve, reject) => {\n\n        osapi.http.post(...args).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestGet(href) {\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.get({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport const promiseRestRequest = function(href){\n    console.warn('Use of promiseRestRequest is deprecated, use promiseRestGet instead')\n    return promiseRestGet(href)\n}\n\nexport function promiseRestPost(href) {\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.post({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestDelete(href) {\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.delete({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport function promiseRestPut(href) {\n    return new Promise((resolve, reject) => {\n        osapi.jive.core.put({\n            v:'v3',\n            href\n        }).execute(response => {\n            if (response.error) reject(response)\n            else resolve(response)\n        })\n    })\n}\n\nexport async function promiseBatch(entries, createBatchEntry){\n\n    function batchObjectToArray(batchResponseObject){\n        return Object.keys(batchResponseObject).map(id => ({id, content: batchResponseObject[id]}))\n    }\n\n    function promiseSingleBatch(entries, createBatchEntry){\n        return new Promise((resolve, reject) => {\n\n            let batch = osapi.newBatch()\n\n            entries.forEach((entry, i) => {\n                const {id, request} = createBatchEntry(entry, i)\n                batch.add(id, request)\n            })\n\n            batch.execute(response => {\n                if (response.error) reject(response)\n                else resolve(response)\n            })\n        })\n    }\n\n    if (entries.length <= 30) {\n        return batchObjectToArray(await promiseSingleBatch(entries, createBatchEntry))\n\n    } else {\n\n        const entryArrays = splitArray(entries, Math.ceil(entries.length / 30))\n        let results = []\n        let response = false\n\n        for (let i = 0; i < entryArrays.length; i++){\n            response = await promiseSingleBatch(entryArrays[i], createBatchEntry)\n\n            results = results.concat(batchObjectToArray(response))\n\n            await pause((i+1) % 4 === 0 ? 11000 : 1000)\n        }\n\n        return results\n    }\n}\n\n\nconst fetchPromise = {\n    promiseHttpGet,\n    promiseHttpPost,\n    promiseOsapiRequest,\n    promiseRestGet,\n    promiseRestPost,\n    promiseRestPut,\n    promiseRestDelete,\n    promiseRestRequest,\n    promiseOsapiPollingRequest,\n    promiseBatch\n}\n\nexport default fetchPromise"]}