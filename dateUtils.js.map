{"version":3,"sources":["src/dateUtils.es6"],"names":["jiveDate2Moment","moment2JiveDate","jiveDate2TS","TS2JiveDate","jiveDateFormat","_checkForErrors","input","expectedType","Error","jiveDate","momentDate","isValid","format","valueOf","ts","dateUtils"],"mappings":";;;;;;;;;;;QAQgBA,e,GAAAA,e;QAMAC,e,GAAAA,e;QAOAC,W,GAAAA,W;QAUAC,W,GAAAA,W;;AA/BhB;;;;;;AAEO,IAAMC,0CAAiB,2BAAvB;;AAEP,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,YAAhC,EAA6C;AACzC,QAAI,QAAOD,KAAP,uDAAOA,KAAP,OAAiBC,YAArB,EAAmC,MAAM,IAAIC,KAAJ,CAAU,6BAA6BD,YAAvC,CAAN;AACtC;;AAEM,SAASP,eAAT,CAAyBS,QAAzB,EAAmC;AACtCJ,oBAAgBI,QAAhB,EAA0B,QAA1B;;AAEA,WAAO,sBAAOA,QAAP,EAAiBL,cAAjB,CAAP;AACH;;AAEM,SAASH,eAAT,CAAyBS,UAAzB,EAAoC;AACvCL,oBAAgBK,UAAhB,EAA4B,QAA5B;AACA,QAAI,CAACA,WAAWC,OAAX,EAAL,EAA2B,MAAM,IAAIH,KAAJ,CAAU,qBAAV,CAAN;;AAE3B,WAAOE,WAAWE,MAAX,CAAkBR,cAAlB,CAAP;AACH;;AAEM,SAASF,WAAT,CAAqBO,QAArB,EAA+B;AAClCJ,oBAAgBI,QAAhB,EAA0B,QAA1B;;AAEA,QAAMC,aAAaV,gBAAgBS,QAAhB,CAAnB;;AAEA,QAAI,CAACC,WAAWC,OAAX,EAAL,EAA2B,MAAM,IAAIH,KAAJ,CAAU,mBAAV,CAAN;;AAE3B,WAAOE,WAAWG,OAAX,EAAP;AACH;;AAEM,SAASV,WAAT,CAAqBW,EAArB,EAAyB;AAC5B,QAAI,OAAOA,EAAP,KAAc,QAAd,IAA0B,OAAOA,EAAP,KAAc,QAA5C,EACI,MAAM,IAAIN,KAAJ,CAAU,4CAAV,CAAN;;AAEJ,QAAME,aAAc,OAAOI,EAAP,KAAc,QAAf,GAA2B,sBAAOA,EAAP,CAA3B,GAAwC,sBAAOA,EAAP,EAAW,GAAX,CAA3D;;AAEA,WAAOJ,WAAWE,MAAX,CAAkBR,cAAlB,CAAP;AACH;;AAED,IAAMW,YAAY;AACdX,kCADc;AAEdJ,oCAFc;AAGdC,oCAHc;AAIdC,4BAJc;AAKdC;AALc,CAAlB;;kBAQeY,S","file":"dateUtils.js","sourcesContent":["import moment from 'moment'\n\nexport const jiveDateFormat = 'YYYY-MM-DDTHH:mm:ss.SSSZZ'\n\nfunction _checkForErrors(input, expectedType){\n    if (typeof input !== expectedType) throw new Error(\"expected argument to be \" + expectedType)\n}\n\nexport function jiveDate2Moment(jiveDate) {\n    _checkForErrors(jiveDate, \"string\")\n\n    return moment(jiveDate, jiveDateFormat)\n}\n\nexport function moment2JiveDate(momentDate){\n    _checkForErrors(momentDate, \"object\")\n    if (!momentDate.isValid()) throw new Error(\"invalid moment date\")\n\n    return momentDate.format(jiveDateFormat)\n}\n\nexport function jiveDate2TS(jiveDate) {\n    _checkForErrors(jiveDate, \"string\")\n\n    const momentDate = jiveDate2Moment(jiveDate)\n\n    if (!momentDate.isValid()) throw new Error(\"invalid jive date\")\n\n    return momentDate.valueOf()\n}\n\nexport function TS2JiveDate(ts) {\n    if (typeof ts !== \"number\" && typeof ts !== \"string\")\n        throw new Error(\"expected argument to be a string or number\")\n\n    const momentDate = (typeof ts === 'number') ? moment(ts) : moment(ts, 'x')\n\n    return momentDate.format(jiveDateFormat)\n}\n\nconst dateUtils = {\n    jiveDateFormat,\n    jiveDate2Moment,\n    moment2JiveDate,\n    jiveDate2TS,\n    TS2JiveDate\n}\n\nexport default dateUtils"]}