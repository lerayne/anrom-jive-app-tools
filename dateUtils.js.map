{"version":3,"sources":["dateUtils.es6"],"names":["jiveDateFormat","_checkForErrors","input","expectedType","Error","jiveDate2Moment","jiveDate","moment2JiveDate","momentDate","isValid","format","jiveDate2TS","valueOf","TS2JiveDate","ts","dateUtils"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAEO,IAAMA,cAAc,GAAG,2BAAvB;;;AAEP,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,YAAhC,EAA6C;AACzC,MAAI,yBAAOD,KAAP,MAAiBC,YAArB,EAAmC,MAAM,IAAIC,KAAJ,CAAU,6BAA6BD,YAAvC,CAAN;AACtC;;AAEM,SAASE,eAAT,CAAyBC,QAAzB,EAAmC;AACtCL,EAAAA,eAAe,CAACK,QAAD,EAAW,QAAX,CAAf;;AAEA,SAAO,wBAAOA,QAAP,EAAiBN,cAAjB,CAAP;AACH;;AAEM,SAASO,eAAT,CAAyBC,UAAzB,EAAoC;AACvCP,EAAAA,eAAe,CAACO,UAAD,EAAa,QAAb,CAAf;;AACA,MAAI,CAACA,UAAU,CAACC,OAAX,EAAL,EAA2B,MAAM,IAAIL,KAAJ,CAAU,qBAAV,CAAN;AAE3B,SAAOI,UAAU,CAACE,MAAX,CAAkBV,cAAlB,CAAP;AACH;;AAEM,SAASW,WAAT,CAAqBL,QAArB,EAA+B;AAClCL,EAAAA,eAAe,CAACK,QAAD,EAAW,QAAX,CAAf;;AAEA,MAAME,UAAU,GAAGH,eAAe,CAACC,QAAD,CAAlC;AAEA,MAAI,CAACE,UAAU,CAACC,OAAX,EAAL,EAA2B,MAAM,IAAIL,KAAJ,CAAU,mBAAV,CAAN;AAE3B,SAAOI,UAAU,CAACI,OAAX,EAAP;AACH;;AAEM,SAASC,WAAT,CAAqBC,EAArB,EAAyB;AAC5B,MAAI,OAAOA,EAAP,KAAc,QAAd,IAA0B,OAAOA,EAAP,KAAc,QAA5C,EACI,MAAM,IAAIV,KAAJ,CAAU,4CAAV,CAAN;AAEJ,MAAMI,UAAU,GAAI,OAAOM,EAAP,KAAc,QAAf,GAA2B,wBAAOA,EAAP,CAA3B,GAAwC,wBAAOA,EAAP,EAAW,GAAX,CAA3D;AAEA,SAAON,UAAU,CAACE,MAAX,CAAkBV,cAAlB,CAAP;AACH;;AAED,IAAMe,SAAS,GAAG;AACdf,EAAAA,cAAc,EAAdA,cADc;AAEdK,EAAAA,eAAe,EAAfA,eAFc;AAGdE,EAAAA,eAAe,EAAfA,eAHc;AAIdI,EAAAA,WAAW,EAAXA,WAJc;AAKdE,EAAAA,WAAW,EAAXA;AALc,CAAlB;eAQeE,S","sourcesContent":["import moment from 'moment'\n\nexport const jiveDateFormat = 'YYYY-MM-DDTHH:mm:ss.SSSZZ'\n\nfunction _checkForErrors(input, expectedType){\n    if (typeof input !== expectedType) throw new Error(\"expected argument to be \" + expectedType)\n}\n\nexport function jiveDate2Moment(jiveDate) {\n    _checkForErrors(jiveDate, \"string\")\n\n    return moment(jiveDate, jiveDateFormat)\n}\n\nexport function moment2JiveDate(momentDate){\n    _checkForErrors(momentDate, \"object\")\n    if (!momentDate.isValid()) throw new Error(\"invalid moment date\")\n\n    return momentDate.format(jiveDateFormat)\n}\n\nexport function jiveDate2TS(jiveDate) {\n    _checkForErrors(jiveDate, \"string\")\n\n    const momentDate = jiveDate2Moment(jiveDate)\n\n    if (!momentDate.isValid()) throw new Error(\"invalid jive date\")\n\n    return momentDate.valueOf()\n}\n\nexport function TS2JiveDate(ts) {\n    if (typeof ts !== \"number\" && typeof ts !== \"string\")\n        throw new Error(\"expected argument to be a string or number\")\n\n    const momentDate = (typeof ts === 'number') ? moment(ts) : moment(ts, 'x')\n\n    return momentDate.format(jiveDateFormat)\n}\n\nconst dateUtils = {\n    jiveDateFormat,\n    jiveDate2Moment,\n    moment2JiveDate,\n    jiveDate2TS,\n    TS2JiveDate\n}\n\nexport default dateUtils"],"file":"dateUtils.js"}