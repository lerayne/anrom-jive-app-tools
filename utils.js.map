{"version":3,"sources":["src/utils.es6"],"names":["unescapeHtmlEntities","pause","splitArray","abridge","getCacheableImage","findContentImage","getImagelessHTML","getContentImage","jsonCopy","isEmptyObject","text","temp","document","createElement","innerHTML","innerText","textContent","ms","setTimeout","resolve","array","chunksNumber","newArray","i","push","undefined","length","chunkLength","Math","ceil","forEach","item","chunkNumber","floor","Error","slice","words","split","replace","join","initialImageURL","imageWidth","thumbnail","jiveStorageResult","match","imageNumberChunks","imageID","contentItem","defaultImageURL","mode","content","contentImages","ref","jQuery","$","find","attr","images","htmlText","options","defaultOptions","obj","JSON","parse","error","console","utils"],"mappings":"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","file":"utils.js","sourcesContent":["import jQuery from 'jive/jquery'\n\nexport function unescapeHtmlEntities(text) {\n    const temp = document.createElement('div')\n    temp.innerHTML = text\n    return temp.innerText || temp.textContent\n}\n\nexport function pause(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport function splitArray(array, chunksNumber) {\n    const newArray = []\n\n    for (let i = 0; i < chunksNumber; i++) {\n        newArray.push([])\n    }\n\n    if (array !== undefined && array.length) {\n        const chunkLength = Math.ceil(array.length / chunksNumber)\n\n        array.forEach((item, i) => {\n            const chunkNumber = Math.floor(i / chunkLength)\n            newArray[chunkNumber].push(item)\n        })\n    }\n\n    return newArray\n}\n\nexport function abridge(text, length = 160) {\n\n    if (typeof text !== 'string') {\n        throw new Error(`\"abridge\" 1st argument must be a string (${typeof text} given)`)\n    }\n\n    //if it's less than limit - just return it\n    if (text.length <= length) return text\n\n    //cut text\n    text = text.slice(0, length)\n\n    let words = text.split(' ')\n\n    //remove last word (cause it can be broken, or too long in case of a link)\n    if (words.length > 1) {\n        words = words.slice(0, words.length - 1)\n    }\n\n    // remove commas and dots from a last word\n    words[words.length - 1] = words[words.length - 1].replace(/\\.|,/gi, '')\n\n    return words.join(' ') + '...'\n}\n\nexport function getCacheableImage(initialImageURL, imageWidth = 500, thumbnail = false) {\n\n    //return initialImageURL\n    if (!initialImageURL) return initialImageURL\n\n    const jiveStorageResult =\n        initialImageURL.match(/(.+)servlet\\/JiveServlet\\/(downloadImage|previewBody)\\/([\\d-]+)\\/(.+)/i)\n\n    //console.log('jiveStorageResult', jiveStorageResult)\n\n    if (!jiveStorageResult || !jiveStorageResult[3]) return initialImageURL\n\n    //get jive image ID from URL\n    const imageNumberChunks = jiveStorageResult[3].split('-')\n    const imageID = imageNumberChunks[imageNumberChunks.length - 1]\n\n    switch (jiveStorageResult[2]){\n        case 'downloadImage':\n            return jiveStorageResult[1]\n                + 'api/core/v3/images/' + imageID + '?width=' + imageWidth\n                + (thumbnail ? '&thumbnail=true' : '')\n        case 'previewBody':\n            return jiveStorageResult[1]\n                + 'servlet/JiveServlet?bodyImage=true&contentType=image&maxWidth=500&maxHeight=300'\n                + '&binaryBodyID=' + imageID\n    }\n}\n\nexport function findContentImage(contentItem, defaultImageURL, mode = 'regexp') {\n\n    if (!contentItem || !contentItem.content || !contentItem.content.text) return null\n\n    switch (mode) {\n        case 'api':\n            // version 1: take from API. Downside: API images list never updates after content creation\n            if (contentItem.contentImages && contentItem.contentImages.length) {\n                return contentItem.contentImages[0].ref\n            }\n            return defaultImageURL\n        case 'jquery':\n            //version 2: find image links with jQuery. Downside: it requests all the images content item has\n            return jQuery ? ($(contentItem.content.text).find('img').attr('src') || defaultImageURL) : defaultImageURL\n        case 'regexp':\n            //version 3: Find image URLs by regExp\n            const images = contentItem.content.text.match(/<img[^>]*src=[\"']?([^>\"']+)[\"']?[^>]*>/im)\n            return (images && images[1]) ? images[1] : defaultImageURL\n        default:\n            return defaultImageURL\n    }\n}\n\nexport function getImagelessHTML(htmlText) {\n    return htmlText.replace(/<img[^>]*src=[\"']?([^>\"']+)[\"']?[^>]*>/gim, '')\n}\n\nexport function getContentImage(contentItem, options={}){\n\n    const defaultOptions = {\n        imageWidth: 500,\n        defaultImageURL: '',\n        mode: 'regexp',\n        thumbnail: false\n    }\n\n    options = {\n        ...defaultOptions,\n        ...options\n    }\n\n    const {imageWidth, defaultImageURL, mode, thumbnail} = options\n\n    return getCacheableImage(findContentImage(contentItem, defaultImageURL, mode), imageWidth, thumbnail)\n}\n\nexport function jsonCopy (obj) {\n    if (typeof obj !== 'object') return null\n    try {\n        return JSON.parse(JSON.stringify(obj))\n    } catch (error) {\n        console.error('Warning! Argument is not a valid JSON. Details:', error)\n    }\n}\n\nexport function isEmptyObject (obj){\n    if (typeof obj !== 'object') return null\n    return Object.keys(obj).length === 0\n}\n\nconst utils = {\n    pause,\n    unescapeHtmlEntities,\n    splitArray,\n    abridge,\n    getCacheableImage,\n    findContentImage,\n    getContentImage,\n    getImagelessHTML,\n    jsonCopy,\n    isEmptyObject\n}\n\nexport default utils"]}